# Parser Design

### Introduction
* Overall, our tasks include: parsing a complicated instruction that includes variables, procedures, expressions, and executable instructions; writing code that is easy to understand and keeps the information trasfer between the frontend and the backend to a minimum; and writing APIs that are understandable and easy to utilize. The backend APIs will allow project members, int the future and in the present, to manipulate and edit aspects of parser design and function; the backend APIs will allow the user to explore the program and turtle interaction without having to mess around with the general parser function. In terms of flexibility and maintainability, this project aims to make it easy to add new sorts of commands (and even command types, assuming the syntax is not too foreign) and new sorts of animations or UI Controls.

### Overview
This project is divided into three main areas:
#### Model
 - a Parser that can convert text into Command objects (or throw Exceptions),
 - **ParserInterface API** represents the External Backend API in a single interface, which is encapsulated in the ParserModel package. The ParserModel will need to have public methods for parsing a String command, as well as storing and deleting user-defined commands and constants. The ParserModel class will be the core public class within the ParserModel package -- the rest of the classes should be package-protected to make sure that the public-facing API of this package is compact and difficuly to misuse. 
 - **Command API** will be the main component of the Internal Backend API, as it will provide a means for adding additional commands. More than an API, the Command interface is at the top of an inheritance heirarchy of Command objects. These include, but are not restricted to, the 'primitives' *(RIGHT, LEFT, LTURN, RTURN, SETHEADING, SHOW, HIDE, PENUP, PENDOWN)*, MATH Commands, BOOLEAN Commands, and COMPOUND Commands.
#### View
 - a screen that includes the turtle, its environment, and various text boxes,
 - DisplayInterface represents the External Frontend API in a single interface, which will be implemented by the class *(in all likelihood, an Application object)* that runs the frontend. It will include methods such as getCommand(), which will take in the text from the user's command box.
#### Controller
 - We envision ourselves using a control for this project, in the form of the ExecutionerInterface. Any class that implements this interface will have the tools needed to listen for Events in the View *(button clicks etc.)* and respond appropriately. The concrete implemetation of this interface will call the Model's external API in order to process the Command objects produced by it, and then use these to call the View's external API. One possibility is that the Commands will be produced as a stack of 'primitive' commands, which will then be called sequentially *(without passing around the list, fo course)*.
- In all likelihood, the Executioner will interact with the data structures that lie behind the entire program, which would make it seem to be more part of the backend than just a 'control' -- but this seems to be an issue of classification and not of design.
 

### User Interface
* The user interface is designed to allow the user to play around with the turtle *(and later, to generate them and switch between them)* with customized commands. The user is initially presented with a Splash Screen, where the instructions are explained. Then, the user selects a turtle image to begin with. The main application screen includes the environment where the turtle exists, the history log of past commands, a text box to input new commands, and a list of possible commands (in an expandable box, or maybe a popup). There will be a **help** button, which creates a popup to assist the user in writing instructions. On top of this, there will be a **replay** button, which will create a popup that replays past commands based on the current history log. When the user inputs an incorrect instruction, the program will recieve an error message from the backend (the popup that appears to explain the error will ideally help the user to understand where they may have gone wrong).

### Design Details
#### Backend
 - The ParserInterface external API will include the following methods:
     -  **createExecutable**, which will turn a string into a list of Command objects
     -  **getCurrentCommands**, which will return a List of basic commands that have been generated by the Parser based on the String command provided
     -  **createCommand**, which will store a user-entered set of commands and store it as a single command that the user can later call
     -  **removeCommand**, which will remove a command (so that it cannot be called in the future, perhaps because it has been overridden)
     -  **createVariable**, which will create a variable and store a string identifier associated with it that the user can later reference
     -  **removeVariable**, which will remove a previously described variable and prevent it from being called in the future
     -  **getPrevious** which returns the previous command (or commands) executed, where n, the number of previous commands, is a possible parameter
 - The Model's internal API will include the following:
     - The Command inheritance heirarchy
     - **execute**, a method in Command which returns a List of Command object created as a result of executing it
     - The ParserStack, which will have a stack for variables and function signatures used when turning a string into a list of Command objects
     - The CommandQueue, which will be used to store Command objects before execution

 - The VisualizerInterface external API will include the following method signatures:
     - **getTurtleX**, which returns the Turtle's x coordinate.
     - **getTurtleY**, which returns the Turtle's y coordinate.
     - **getTurtleHeading**, which returns the Turtle's heading *(angle facing NORTH)*.
     - **getCommand**, which returns a String representing the user's input.
     - **getPenStatus**, which returns the status of the pen.
     - **changeBackground**, which sets the background color.

- The Visualizer internal API will include the following method signatures:
     - **setTurtleX**, which sets the Turtle's x coordinate.
     - **setTurtleY**, which sets the Turtle's y coordinate.
         - Optional: these could include parameter which determines whether or not to include an animaition
     - **setTurtleHeading**, which sets the Turtle's heading.

### Design Considerations
* The command input is a string that can be divided into many possible one-line executable commands. It can include loops, procedures, expressions, variables, and more (including recursive procedures). The team has considered parsing each command according to the initial label and its command type (PRIMITIVE, COMPOUND, MATH, or BOOLEAN), before any meaningful decomposition of the given string. Each Command object will participate in the Parsing task itself, too, as it will make sense for each Command to know its format and parameters, and to throw exceptions when these are not met. This will occur as commands and parameters are added to and removed from the ParserStack.
* Separation between the frontend and the backend API will be key to make sure that we are actually desingning two distinct APIs. The Controller (Executioner) will be important, as a means of separating the very distinct tasks of *parsing* and *visualisation* -- in addition to delegating tasks between the two APIs, it will be the main class that interacts with the data structures associated directly with the state of the Turtle and its Environment.

### Team Responsibilities
* Lorne
    * Primary: Frontend
    * Secondary: TBD
* Mariusz
    * Primary: Backend *(ParserInterface)*
    * Secondary: help with Executioner/Visualizer interface *(experience with roperties and bindings)*
* Eric
    * Primary: Backend *(Command heirarchy)*
    * Secondary: ParserStack
* Cemal
    * Primary: Backend *(Excecutioner)*
    * Secondary: TBD

# Use Cases

### The user types 'fd 50' in the command window, and sees the turtle move in the display window leaving a trail, and the command is added to the environment's history.
* From backend: commandString = visualizer.getCommand(); 
* From parser: commandObject = new Command(command);
* (check if command is valid, perhaps by checking a boolean member variable of the Command object)
* From executioner: execute(command); 

### The user sets the pen's color using the UI so subsequent lines drawn when the turtle moves use that color.
* visualizer.setPenColor(int turtleID, String hexColorCode);

### Additionally, each member of the team should create **two use cases** of their own for the part of the project for which they intend to take responsibility.

### **Lorne**
* Case 1: User presses replay button and the frontend displays a new screen that replays all of the commands in history.
* Frontend:
    * EventHandler: setHistoryReplay(true);
    * command = history.getList();
* Backend: 
    * setCurrentX(Turtle.getX());
    * setCurrentY(Turtle.getY());
    * setCurrentAngle(Turtle.getAngle());
    * if(!Visualizer.getSetHistoryReplay);{history.add(command)} // the backend does not store the commands in the history replay
    * ... runs commands
    * Visualizer.doneReplay();
    * Turtle.setX(currentX);
    * Turtle.setY(currentY);
    * Turtle.setAngle(currentAngle);
* Frontend:
    * displayEndReplayPopup();
* Case 2: User inputs an incorrect command
* Frontend:
    * EventHandler(input): command = input;
* Backend:
    * Parser: Visualizer.setError(ErrorMessage);
* Frontend:
    * displayError(ErrorMessage);

### **Eric**
* Case 1: The user calls a FOR loop:
    * VisualInterface (Frontend): getCommand() is called by the Executioner, updating the value of some variable that stores the current command.
    * ParserInterface (Backend): createExecutable(String ...) is called to turn this into an executable list of primitive Command objects. This is done using stacks, but all of this is hidden -- all that matters is that the list of commands that is produced comes in the correct order.
    * Executioner (Controller): execute(List\<Command\> ...) is called in order to update the internal data associated with the turtle and its environment. The executioner will schedule animations during this time, too.
    * Next, the executioner moves on to matters relevant to the frontend...

* Case 2: The user declares a compound command; TO newcommand [a, b, c] [FOR [i 1 c 1] [FD a RT b]]
    * VisualInterface (Frontend): getCommand() is called, updating the value of some variable that stores the current command to "TO [a, b, c] [FOR [i 1 c 1] [FD a RT b]]"
    * ParserInterface (Backend): createCommand(String input) is called to turn this into a new Command object
    * Command (Internal Backend): The internal backend shows its role when doCommand() method of **newcommand** calls the doCommand() method of different Command objects within this new object.
    * Executioner (Controller): the executioner then uses its own methods to add this to a list of viable commands
    * Next, the executioner moves on to matters relevant to the frontend...
    * *(note: the one doing all of this "calling" is the Executioner)*


### **Mariusz**
* Case 1: The user enters a command to store a variable called myVar to the value 10.
    * Frontend: updates a StringProperty with the text of the new command
    * Controller: calls the getCommands method of the ParserModel with the String of the new command as a paremeter
    * ParserInterface: parses the String and returns a list of commands based on the parse.
    * Controller: iterates through the commands that are returned by the parser
        * stores a variable in the ParserModel using the addVariable method
        * calls a method in the Visualizer to display that the variable has been stored
* Case 2: The user enters an incorrectly formatted command
    * Frontend: updates a StringProperty with the text of the new command
    * Controller: calls the getCommands method of the ParserModel with the String of the new command as a paremeter
    * ParserInterface: parses the String and at some point in the parsing, throws an InvalidNLogoSyntaxException which encapsulates some details about the error
        * Alternatively, a better design could be for the exception to be caught internal to the ParserModel, and to catch it by simply returning a command that says the controller should tell the view to display an error message
    * Controller: iterates through the commands, sees that it has to tell the Visualizer to display the error message
    * Visualizer: displays the error message.

### **Cemal**
* Case 1:

* Case 2: 
    